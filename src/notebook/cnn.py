from torch import nn
import pickle

class CNN_2(nn.Module):
    def __init__(self,input_dim,output_dim,dropout,filter=16,num_hidden=20):
        super().__init__()
        self.conv1 = nn.Conv1d(1,filter,3, padding = 1)
        self.conv2 = nn.Conv1d(filter,filter,3, padding = 1)
        self.conv3 = nn.Conv1d(filter,filter,3, padding = 1)
        self.maxpool1 = nn.MaxPool1d(2) 
        self.maxpool2 = nn.MaxPool1d(3) 
        self.conv4 = nn.Conv1d(filter,filter,3, padding = 1)
        self.flatten = nn.Flatten()
        self.dense = nn.Linear(int(filter*input_dim/6),num_hidden)
        self.drop = nn.Dropout(dropout)
        self.dense2 = nn.Linear(num_hidden,output_dim)
        self.prelu = nn.PReLU()
        self.softmax = nn.Softmax(dim=1)
        
    def forward(self,X):
        X = self.conv1(X)
        X = self.prelu(X)
        # X = self.conv2(X)
        # X = self.prelu(X)
        X = self.maxpool1(X)
        X = self.conv3(X)
        X = self.prelu(X)
        # X = self.conv4(X)
        # X = self.prelu(X)
        X = self.maxpool2(X)
        X = self.flatten(X)
        X = self.drop(X)
        X = self.dense(X)
        X = self.prelu(X)
        X = self.dense2(X)
        X = self.prelu(X)
        X = self.softmax(X)
        return X
    
def cnn():
    with open('models/cnn.pkl', 'rb') as f:
        model = pickle.load(f)
    return model