import tkinter as tk
from tkinter import ttk
from tkinter import filedialog as fd
from tkinter.messagebox import showinfo
from tools.get_data import get_model, get_output
import tkinter.scrolledtext as sc
import threading
import sys, os

values = {'Random Forest':1, 'Decision Tree':1,
          'Support Vector Machine':2, 'K-Nearest Neighbors':2,
          'Logistic Regression':2,
          'LightGBM':1, 'AdaBoost':1,
          '1 Layer Neural Network':3, '2 Layer Neural Network':3,
          'Convolutional Neural Network':4, 'Ensemble Neural Network':4}

local_model = None
local_model_but_str = None

def select_files():
    info.delete(1.0, tk.END)
    filename = fd.askopenfilename(
        title='Open a file',
        initialdir='/')
    progress_activate(filename)

def select_folder():
    info.delete(1.0, tk.END)
    foldername = fd.askdirectory(
        title='Select a folder',
        initialdir='/'
    )
    print(foldername)
    progress_activate(foldername)

def loading(bar, parent, thread, step = 10):
    if thread.is_alive():
        bar['value'] += step
        if bar['value'] == 100 or bar['value'] == 0:
            step = -step
        parent.after(100, loading, bar, parent, thread, step)
    else:
        bar.pack_forget()

def a(old, info, filenames, i = 1):
    for i, file in enumerate(filenames):
        old.config(text=f'{i-1}/{len(filenames)} files scanned')
        info.insert(tk.END, '*'*50 + '\n')
        info.insert(tk.END, f'Scanning {file}\n')
        info.insert(tk.END, get_output(local_model, values[local_model_but_str], file) + '\n')
    old.pack_forget()
    info.insert(tk.END, 'Scan completed\n')

def progress_activate(path):
    global local_model
    global local_model_but_str
    local_model = get_model(m.get())
    local_model_but_str = m.get()
    for th in threading.enumerate():
        if th != threading.main_thread():
            showinfo(
                title='Error',
                message='A scan is already in progress'
            )
            return
    bruh.pack(expand=True, pady=10)
    begin = ttk.Label(load, text='Begin scanning files...\n0/10 files scanned', font=('Arial', 15))
    begin.pack(expand=True)
    if os.path.isfile(path):
        filenames = [path]
    else:
        filenames = []
        for root, _, files in os.walk(path):
            for file in files:
                filenames.append(os.path.join(root, file))
    new_thread = threading.Thread(target=a, args=[begin, info, filenames])
    new_thread.start()
    loading(bruh, iframe, new_thread)
    
    
if __name__ == '__main__':
    # create the root window
    gui = tk.Tk()
    gui.title('Malware Detection System')
    gui.resizable(False, False)
    gui.geometry('1000x700')

    # create the file chooser frame
    fframe = ttk.Frame(gui)
    fframe.pack(expand=False, fill=tk.BOTH, ipadx=10, ipady=10)

    # create the information frame
    iframe = ttk.Frame(gui)
    iframe.pack(expand=True, fill=tk.BOTH)
    load = ttk.Frame(iframe)
    load.pack(expand=True)
    infor = ttk.Frame(iframe)
    infor.pack(expand=True)

    # open buttons
    open_file_button = ttk.Button(
        fframe,
        text='Open a File',
        command=select_files
    )

    open_folder_button = ttk.Button(
        fframe,
        text='Open a Folder',
        command=select_folder
    )


    # chooser label
    label_1 = ttk.Label(fframe, text='Please choose file(s) or a folder', font=('Arial', 15))
    
    # model chosser
    mlabel = ttk.Label(fframe, text='Choose a model', font=('Arial', 15))
    m = tk.StringVar()
    modelchooser = ttk.Combobox(load, textvariable=m, values=list(values.keys()), state='readonly')
    modelchooser.config(width=30)
    modelchooser.pack(expand=True, pady=10)
    modelchooser.current(0)

    # information widgets
    bruh = ttk.Progressbar(load, orient='horizontal', length=200, mode='indeterminate')
    
    label_1.pack(expand=True, pady=10)
    open_file_button.pack(expand=True, pady=10, side=tk.LEFT)
    open_folder_button.pack(expand=True, pady=10, side=tk.RIGHT)
    info = sc.ScrolledText(infor, font=('Arial', 15))
    info.pack(expand=True, fill=tk.BOTH)

    # run the application
    try:
        gui.mainloop()
    except KeyboardInterrupt:
        sys.exit(0)

