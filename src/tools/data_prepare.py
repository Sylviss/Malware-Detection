from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd

def data_split(classify_type):
    datasets = r"../Datasets/ClaMP_In_Selected.csv"
    df = pd.read_csv(datasets)
    df2 = pd.read_csv(r"../Datasets/ClaMP_In_Selected_Test.csv")

    if classify_type == "multiclass":
        df3 = pd.read_csv(r"../Datasets/ClaMP_In_Selected_Additional.csv")
        df = pd.concat([df,df3])
    df2 = df2.sample(frac = 1)
    # Seperate the data
    X_hehe,y = df.drop(columns=["class"]).to_numpy(), df["class"].to_numpy()
    X_hehe_2, y_true = df2.drop(columns=["class"]).to_numpy(), df2["class"].to_numpy()

    if classify_type == "binary":
        for i,label in enumerate(y):
            if label!=0:
                y[i]=1
        for i,label in enumerate(y_true):
            if label!=0:
                y_true[i]=1
    return X_hehe, y, X_hehe_2, y_true
            
def data_preprocess_basic(X_hehe, y, X_hehe_2, y_true):
    scaler = StandardScaler()
    scaler.fit(X_hehe)
    X = scaler.transform(X_hehe)
    X_true = scaler.transform(X_hehe_2)
    X_train, X_test, y_train, y_test = train_test_split(X,y, random_state = 16, test_size = 0.25)
    X_true, X_valid, y_true, y_valid = train_test_split(X_true,y_true, random_state = 16, test_size = 0.25)
    return X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid

def data_preprocess_ohe(X_hehe, y, X_hehe_2, y_true):
    out = ["e_lfanew", "NumberOfSections", "BaseOfData", "SizeOfStackReserve", "SizeOfHeapReserve", "SizeOfHeapCommit", "E_text", "E_data", "filesize", "E_file"]
    scaler = StandardScaler()
    categories = [sorted(list(set(X_hehe[col]).union(set(X_hehe_2[col])))) for col in X_hehe.columns if col not in out]
    ohe = OneHotEncoder(categories=categories)
    categorical_1 = X_hehe.drop(columns = out).to_numpy()
    categorical_2 = X_hehe_2.drop(columns = out).to_numpy()
    non_categorical_1 = X_hehe[out].to_numpy()
    non_categorical_2 = X_hehe_2[out].to_numpy()
    scaler.fit(np.concatenate((non_categorical_1, non_categorical_2), axis = 0))
    trans_non_cate1 = scaler.transform(non_categorical_1)
    trans_non_cate2 = scaler.transform(non_categorical_2)
    ohe.fit(categorical_1)
    trans_cate_1 = ohe.transform(categorical_1).toarray()
    ohe.fit(categorical_2)
    trans_cate_2 = ohe.transform(categorical_2).toarray()
    X = np.concatenate((trans_cate_1, trans_non_cate1), axis = 1)
    X_true = np.concatenate((trans_cate_2, trans_non_cate2), axis = 1)
    X_train, X_test, y_train, y_test = train_test_split(X,y, random_state = 16, test_size = 0.25)
    X_true, X_valid, y_true, y_valid = train_test_split(X_true,y_true, random_state = 16, test_size = 0.25)
    return X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid
