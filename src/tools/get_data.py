import os, pickle, joblib
from torch import nn
from sklearn.preprocessing import StandardScaler,OneHotEncoder
import lightgbm as lgb
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression,LinearRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, recall_score
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import joblib as jl
from tqdm import tqdm
import numpy as np
from torch import nn
from skorch import NeuralNetClassifier
from sklearn.utils import resample
from tools.input import input_single_file_3
def get_model(model_str):
    match model_str:
        case 'Random Forest':
            return joblib.load("./models/RandomForestClassifier.joblib")
        case "LightGBM":
            return joblib.load("./models/LGBClassifier.joblib")
        case "Support Vector Machine":
            return joblib.load("./models/SVMClassifier.joblib")
        case "K-Nearest Neighbors":
            return joblib.load("./models/KNeightborsClassifier.joblib")
        case "Logistic Regression":
            return joblib.load("./models/LogisticRegression.joblib")
        case "Decision Tree":
            return joblib.load("./models/DecisionTreeClassifier.joblib")
        case "AdaBoost":
            return joblib.load("./models/AdaBoostClassifier.joblib")
        
def get_output(model,type,path):
    res = input_single_file_3
    for name in res:
        data = pd.DataFrame(data=res[name]["pe_header"],index = [0]).to_numpy()
        match type:
            case 1:
                scaler = joblib.load("ScalerClassic.joblib")
                data_new = scaler.transform(data)
                prediction = model.predict(data_new)
                return prediction
    
    
    