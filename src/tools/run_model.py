import joblib as jl
from sklearn.metrics import accuracy_score, recall_score, f1_score, roc_auc_score
from tools.data_prepare import data_preprocess_basic, data_preprocess_ohe, data_process_cnn

trans = {}
classify_type = "binary"

def run(model, X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid, ohc=None):
    if type[model] == "cnn":
        y_predict_train_ohe=model.predict(X_train)
        y_predict_ohe=model.predict(X_test)
        y_pred_true_ohe = model.predict(X_true)
        y_predict_train = ohc.inverse_transform(y_predict_train_ohe)
        y_predict = ohc.inverse_transform(y_predict_ohe)
        y_pred_true = ohc.inverse_transform(y_pred_true_ohe)
    else:
        y_predict_train= model.predict(X_train)
        y_predict= model.predict(X_test)
        y_pred_true = model.predict(X_true)
    display_labels = {"binary":["Benign","Malware"],"multiclass":["benign","generic","virus","ransomware","rat","spyware","worm"]}
    print("Train metrics :")
    print("\tAccuracy:", accuracy_score(y_train, y_predict_train))
    if classify_type == "binary":
        print("\tRecall:", recall_score(y_train, y_predict_train))
        print("\tF1:",f1_score(y_train, y_predict_train))
        print("AUC:", roc_auc_score(y_train, y_predict_train))
    print("Test metrics :")
    print("\tAccuracy:", accuracy_score(y_test, y_predict))
    if classify_type == "binary":
        print("\tRecall:", recall_score(y_test, y_predict))
        print("\tF1:",f1_score(y_test, y_predict))
        print("AUC:", roc_auc_score(y_test, y_predict))
    print("True Test metrics :")
    print("\tAccuracy:", accuracy_score(y_true, y_pred_true))
    if classify_type == "binary":
        print("\tRecall:", recall_score(y_true, y_pred_true))
        print("\tF1:",f1_score(y_true, y_pred_true))
        print("AUC:", roc_auc_score(y_true, y_pred_true))

def get_model(name):
    clf = jl.load(trans[name])
    if type[name] == 'basic':
        X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid = data_preprocess_basic()
        run(clf, X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid)
    elif type[name] == 'ohe':
        X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid = data_preprocess_ohe()
        run(clf, X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid)
    elif type[name] == 'ohc':
        X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid, ohc = data_process_cnn()
        run(clf, X_train, X_test, y_train, y_test, X_true, X_valid, y_true, y_valid, ohc)