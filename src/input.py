import pefile
import os

def input_single_file(file_path):
    res = {"dll":[],"api":[],"pe_header":{},"pe_sections":{}}
    pe = pefile.PE(file_path, fast_load=True)
    pe.parse_data_directories()
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        res["dll"].append(str(entry.dll, encoding = 'utf-8').lower())
        for imp in entry.imports:
            if imp.name is not None:  
                res["api"].append(str(imp.name, encoding = 'utf-8').lower())
    for section in pe.sections:
        section_name = str(section.Name, encoding='utf-8').rstrip('\x00')[1:]
        res["pe_sections"].update({
            section_name + "_Misc_VirtualSize" : section.Misc_VirtualSize,
            section_name + "_VirtualAddress" : section.VirtualAddress,
            section_name + "_SizeOfRawData" : section.SizeOfRawData,
            section_name + "_PointerToRawData" : section.PointerToRawData,
            section_name + "_PointerToRelocations" : section.PointerToRelocations,
            section_name + "_PointerToLinenumbers" : section.PointerToLinenumbers,
            section_name + "_NumberOfRelocations" : section.NumberOfRelocations,
            section_name + "_NumberOfLinenumbers" : section.NumberOfLinenumbers,
            section_name + "_Charateristics" : section.Characteristics
        })
        
    dos_header_attributes = {
        "e_magic": pe.DOS_HEADER.e_magic,
        "e_cblp": pe.DOS_HEADER.e_cblp,
        "e_cp": pe.DOS_HEADER.e_cp,
        "e_crlc": pe.DOS_HEADER.e_crlc,
        "e_cparhdr": pe.DOS_HEADER.e_cparhdr,
        "e_minalloc": pe.DOS_HEADER.e_minalloc,
        "e_maxalloc": pe.DOS_HEADER.e_maxalloc,
        "e_ss": pe.DOS_HEADER.e_ss,
        "e_sp": pe.DOS_HEADER.e_sp,
        "e_csum": pe.DOS_HEADER.e_csum,
        "e_ip": pe.DOS_HEADER.e_ip,
        "e_cs": pe.DOS_HEADER.e_cs,
        "e_lfarlc": pe.DOS_HEADER.e_lfarlc,
        "e_ovno": pe.DOS_HEADER.e_ovno,
        "e_oemid": pe.DOS_HEADER.e_oemid,
        "e_oeminfo": pe.DOS_HEADER.e_oeminfo,
        "e_lfanew": pe.DOS_HEADER.e_lfanew
    }

    file_header_attributes = {
        "Machine": pe.FILE_HEADER.Machine,
        "NumberOfSections": pe.FILE_HEADER.NumberOfSections,
        "TimeDateStamp": pe.FILE_HEADER.TimeDateStamp,
        "PointerToSymbolTable": pe.FILE_HEADER.PointerToSymbolTable,
        "NumberOfSymbols": pe.FILE_HEADER.NumberOfSymbols,
        "SizeOfOptionalHeader": pe.FILE_HEADER.SizeOfOptionalHeader,
        "Characteristics": pe.FILE_HEADER.Characteristics
    }

    optional_header_attributes = {
        "Magic": pe.OPTIONAL_HEADER.Magic,
        "MajorLinkerVersion": pe.OPTIONAL_HEADER.MajorLinkerVersion,
        "MinorLinkerVersion": pe.OPTIONAL_HEADER.MinorLinkerVersion,
        "SizeOfCode": pe.OPTIONAL_HEADER.SizeOfCode,
        "SizeOfInitializedData": pe.OPTIONAL_HEADER.SizeOfInitializedData,
        "SizeOfUninitializedData": pe.OPTIONAL_HEADER.SizeOfUninitializedData,
        "AddressOfEntryPoint": pe.OPTIONAL_HEADER.AddressOfEntryPoint,
        "BaseOfCode": pe.OPTIONAL_HEADER.BaseOfCode,
        "BaseOfData": pe.OPTIONAL_HEADER.BaseOfData,
        "ImageBase": pe.OPTIONAL_HEADER.ImageBase,
        "SectionAlignment": pe.OPTIONAL_HEADER.SectionAlignment,
        "FileAlignment": pe.OPTIONAL_HEADER.FileAlignment,
        "MajorOperatingSystemVersion": pe.OPTIONAL_HEADER.MajorOperatingSystemVersion,
        "MinorOperatingSystemVersion": pe.OPTIONAL_HEADER.MinorOperatingSystemVersion,
        "MajorImageVersion": pe.OPTIONAL_HEADER.MajorImageVersion,
        "MinorImageVersion": pe.OPTIONAL_HEADER.MinorImageVersion,
        "MajorSubsystemVersion": pe.OPTIONAL_HEADER.MajorSubsystemVersion,
        "MinorSubsystemVersion": pe.OPTIONAL_HEADER.MinorSubsystemVersion,
        "SizeOfImage": pe.OPTIONAL_HEADER.SizeOfImage,
        "SizeOfHeaders": pe.OPTIONAL_HEADER.SizeOfHeaders,
        "CheckSum": pe.OPTIONAL_HEADER.CheckSum,
        "Subsystem": pe.OPTIONAL_HEADER.Subsystem,
        "DllCharacteristics": pe.OPTIONAL_HEADER.DllCharacteristics,
        "SizeOfStackReserve": pe.OPTIONAL_HEADER.SizeOfStackReserve,
        "SizeOfStackCommit": pe.OPTIONAL_HEADER.SizeOfStackCommit,
        "SizeOfHeapReserve": pe.OPTIONAL_HEADER.SizeOfHeapReserve,
        "SizeOfHeapCommit": pe.OPTIONAL_HEADER.SizeOfHeapCommit,
        "LoaderFlags": pe.OPTIONAL_HEADER.LoaderFlags,
        "NumberOfRvaAndSizes": pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    }

    res["pe_header"].update(dos_header_attributes)
    res["pe_header"].update(file_header_attributes)
    res["pe_header"].update(optional_header_attributes)
    return res

def input_directories(path):
    file_list=os.listdir(path)
    res = {}
    for file in file_list:
        res[file] = input_single_file(file)
    return res